% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clique_cluste.R
\name{relax_cliques}
\alias{relax_cliques}
\title{Relax cliques by joining cliques connected by more edges than specified}
\usage{
relax_cliques(
  partition,
  SorCS,
  frac = 0.5,
  CS_given = FALSE,
  relax_method = "greedyCliqueJoin",
  clq_importance = NULL
)
}
\arguments{
\item{partition}{A clique membership indicator vector (of nodes)}

\item{SorCS}{A similarity matrix of nodes or of cliques of nodes}

\item{frac}{Minimum fraction of connections allowed between cliques to be joined, number in  \verb{[0,1]}.}

\item{CS_given}{If \code{TRUE}, then \code{SorCS} is assumed to be clique similarity matrix and clique similarity calculation using \code{partition} is not performed.}

\item{relax_method}{A clique relaxation method, character string giving the name of the variant. see details.}

\item{clq_importance}{If not \code{NULL} then this argument is used in clique relaxation. Vector of numerical importance score of each clique (of length equal to number of non zero labels in \code{partition}). See details (only used if \code{relax_method=="greedyCliqueJoin"}).}
}
\value{
A list with two named components:

\itemize{
\item \code{cliq} - a clique membership cluster indicator vector (cliques are in the same cluster if relaxation joined them together)
\item \code{node} - a node membership cluster indicator vector (node is in a cluster \code{i} if clique to which it belongs is inside cluster \code{i})
}

Additionally, attribute \code{core} is set if \code{relax_method=="greedyCliqueJoin"}, a list of similar structure with two elements:
\itemize{
\item \code{cliq} - logical vector, entry is \code{TRUE} if given clique is a \code{core}
\item \code{node} - logical vector, entry is \code{TRUE} if given node belongs to \code{core} clique
}

(see details for meaning of \code{core})

Attribute \code{labelMap} is set if it was set if non zero labels of cliques were not consecutive integers, see details.
}
\description{
Given node similarity graph and group membership vector, function
will join groups into clusters if they are connected by more than
\code{frac} of total possible number edges between them.
Groups are assumed to be cliques.
}
\details{
If \code{CS_given} is \code{FALSE}, then \code{SorCS} is assumed to be similarity matrix of nodes,
and group similarity matrix is constructed by \code{\link[=cliqueSimilarity]{cliqueSimilarity()}}.
This includes relabeling non zero clique labels to consecutive integers from 1 to number of cliques.
Note that \code{cliqueSimilarity} does not take into the account the weights so \code{SorCS} can be adjacency matrix for the same effect.

Result of relabeling is stored in the attribute \code{labelMap} (if it was needed) inherited from output of \code{cliqueSimilarity}.
If \code{CS_given} is \code{TRUE}, then \code{SorCS} is assumed to be precomputed output of \code{\link[=cliqueSimilarity]{cliqueSimilarity()}} and \code{labelMap} is inherited from it.

\code{relax_method} can be currently set to one of \code{c('greedyCliqueJoin', 'components')}:
\itemize{
\item \code{greedyCliqueJoin} - sequentially initialize each cluster by choosing most important not-yet clustered clique as an initial \code{core} of the cluster, then join every clique to the core if it has at least \code{frac} of total possible connections to the \code{core}. Continue until all cliques are examined. \code{clq_importance} by default (when it is set to \code{NULL}) is given by clique sizes.
\item \code{components} - clusters are connected components of the weighted clique supergraph, where nodes are cliques and weights are clique similarities computed by \verb{[n observed edges between cliques i,j]/[n total possible edges between cliques i,j]}. Weights less than \code{frac} are zeroed out.
}
}
\examples{
data(leukemia)
data(leukemia_clusters)
#example 1: threshold selection by optimizing "clique complexity score"
opt_<- thr_optimizer(leukemia)
cliqueSimilarity(opt_$maximizer_partition, leukemia \%thr\% opt_$thr)-> cS
#initial threshold on leukemia matrix so good we do not really need thresholding of cS for reasonable separation
cluster_membership<- relax_cliques(opt_$maximizer_partition, cS,
                                   CS_given=TRUE,        #default FALSE, means 2nd arg is cS not orig. similarity
				     relax_method="components",
				frac=0.0) #no thresholding of cS here
#node lvl memberships: clique and cluster
table(opt_$maximizer_partition)
table(cluster_membership$node)
#clique lvl membership:
table(cluster_membership$cliq)
igraph::compare(cluster_membership$node, leukemia_clusters, 'adjusted.rand')
heatmap(leukemia, Rowv=NA, Colv=NA, scale="none", main="original similarity matrix")
heatmap(leukemia \%thr\% opt_$thr, Rowv=NA, Colv=NA, scale="none", main="similarity thresholded by optimizing complexity")

#example 2: threshold selection by considering MST
thr_1<- critical_mst_thr(leukemia)
p1<- greedyCliquePartitioner(leukemia \%thr\% thr_1)$membership
cl1<- relax_cliques(p1, SorCS=leukemia \%thr\% thr_1, #one can give similarity instead of cS matrix
                      relax_method="components", frac=0.5 )
#first application: not enough to find the natural clusters fully
heatmap(leukemia \%thr\% thr_1, Rowv=NA, Colv=NA, scale="none", main="similarity thresholded by lvl1 critical MST")
igraph::compare(cl1$node, leukemia_clusters, "adjusted.rand")
#increasing frac improves result
cl1<- relax_cliques(p1, SorCS=leukemia \%thr\% thr_1, #one can give similarity instead of cS matrix
                      relax_method="components", frac=0.95 )
igraph::compare(cl1$node, leukemia_clusters, "adjusted.rand")
#another strategy: apply initial thresholding more than once
 #iterate 3 times
thr_3<- critical_mst_thr(leukemia \%thr\% critical_mst_thr(leukemia \%thr\% thr_1))
#much more separation
heatmap(leukemia \%thr\% thr_3, Rowv=NA, Colv=NA, scale="none", main="similarity thresholded by lvl3 critical MST")
p3<- greedyCliquePartitioner(leukemia \%thr\% thr_3)$membership
#cliques alone can separate clusters pretty accurately
igraph::compare(p3, leukemia_clusters, "adjusted.rand")
#relaxation by connecting cliques similar above 0.1 solves problem almost perfectly 
cl3<- relax_cliques(p3, leukemia \%thr\% thr_3, relax_method="components", frac=0.95)
igraph::compare(cl3$node, leukemia_clusters, "adjusted.rand") 
}
