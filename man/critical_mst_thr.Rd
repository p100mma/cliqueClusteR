% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/thr_seeke.R
\name{critical_mst_thr}
\alias{critical_mst_thr}
\title{Find a separating weight threshold of a dense undirected weighted graph by considering its maximum spanning tree}
\usage{
critical_mst_thr(S)
}
\arguments{
\item{S}{A symmetric weight matrix of a graph of which threshold will be chosen based on its maximum spanning tree}
}
\value{
A scalar value giving the found threshold
}
\description{
This is a heuristic that looks at the most extreme change in weight of the edges in a maximum spanning tree of the graph to deduce a threshold of weights under which edges are optimal to zero uut. See details for full description.
}
\details{
Note that in the following we use MST to refer to maximum spanning tree (as opposed to minimum spanning tree).
Objective of the method is to find an optimal \code{thr} in a sense that in a graph described by
thresholded weight matrix \code{S_t} (where similarities lower than \code{thr} are zeroed out) connections inside
main natural clusters are perserved.

To deduce a separating threshold based on maximum spanning tree (MST), following steps are taken.
First, a  maximum spanning tree of the graph described by input \code{S} is computed.
Then, weights of all edges of MST are sorted in the increasing order.
Differences between pairs of subsequent sorted weights are computed.
The threshold is chosen as an arithmetic mean of pairs of weights for which the computed difference was maximal.

The rationale for the method is the following. If there are natural clusters in the input graph,
then the similarities between nodes inside those clusters are substantially bigger than similarities
between pairs of nodes coming from different clusters.
If the natural clusters are truly separated then also the maximum between cluster similarity is substantially
smaller than the minimum  of maximum similarities (computed per each node pair) in the cluster.
If we consider weights of MST starting from the smallest one, if one weight is suddenly very big,
hypothesis is that the previous weight is of the edge joining different natural clusters.
Moreover, if it is so, then it is also the tightest possible connection between distinct natural clusters
(since it is picked from MST).
Arithmetic mean of that weight and the next one in the sorted stack
is surely bigger than this critical weight, so zeroing out connections with weights below that mean
will delete only connections between natural clusters and keep tight connections inside clusters intact.

Note that this method always finds a threshold (we can awlays find maximum difference).
Wether it is truly remarkably big difference, that is another question.

This method should be considered only as a initial filtering step, not an end all solution, because it might
happen that there are few strong connections between natural clusters (while most of the other ones
are very weak). This method by design will not be able to split such clusters by itself.
}
\examples{
data(leukemia)
opt_thr<- critical_mst_thr(leukemia)
}
\seealso{
\code{\link[igraph:mst]{igraph::mst()}}, \code{\link[=thr_optimizer]{thr_optimizer()}}
}
