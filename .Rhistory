c(10 ,10 ,10 ,0  ,0  ,0  ), #5
c(10 ,10 ,0  ,10 ,0  ,0  )  #6
# 1   2   3   4   5   6
)
heatmap((W>0)*1. )
heatmap((W>0)*1.,scale="none" )
heatmap((W>0)*1.,scale="none", revC=TRUE )
heatmap((W>0)*1.,scale="none", revC=TRUE, Colv=NA,Rowv=NA )
library(cliquePartitioneR)
isSymmetric(W)
c1<-greedyCliquePartitioner(W, expansion_mode = "basic")
c2<-greedyCliquePartitioner(W, expansion_mode = "average")
c3<-greedyCliquePartitioner(W, expansion_mode = "max")
c1$membership
c2$membership
c3$membership
heatmap(  (W[order(c1), order(c1)]>0)*1.0, revC=TRUE, scale="none",
Rowv=NA, Colv=NA)
heatmap(  (W[order(c1), order(c1)]>0)*1.0, revC=TRUE, scale="none",
Rowv=NA, Colv=NA)
heatmap(  (W[order(c1$membership), order(c1$membership)]>0)*1.0, revC=TRUE, scale="none",
Rowv=NA, Colv=NA)
heatmap(  (W[order(c1$membership), order(c1$membership)])*1.0, revC=TRUE, scale="none",
Rowv=NA, Colv=NA)
areCliques(c1$membership)
areCliques(W,c1$membership)
areCliques(W,c2$membership)
areCliques(W,c3$membership)
help(package='cliqueParitioneR')
library(cliquePartitioneR)
library(cliquePartitioneR)
library(cliquePartitioneR)
W<- rbind(
c(0  ,100,90 ,80 ,10 ,10 ), #1
c(100,0  ,10 ,80 ,10 ,10 ), #2
c(90 ,10 ,0  ,0  ,10 ,0  ), #3
c(80 ,80 ,0  ,0  ,0  ,10 ), #4
c(10 ,10 ,10 ,0  ,0  ,0  ), #5
c(10 ,10 ,0  ,10 ,0  ,0  )  #6
# 1   2   3   4   5   6
)
isSymmetric(W)
c1<-greedyCliquePartitioner(W, expansion_mode = "basic")
c2<-greedyCliquePartitioner(W, expansion_mode = "average")
c3<-greedyCliquePartitioner(W, expansion_mode = "max")
c4<-greedyCliquePartitioner(W, expansion_mode = "outN")
library(MDFS)
data("madelon")
dim(madelon$data)
load("HCCsim/data/brca.RData")
load("HCCsim/data/brca_clusters.RData")
set.seed(123)
sample(1:nrow(brca), size = 500, replace = FALSE)-> idx
brca<- brca[idx, ]
dim(brca)
save(brca, file="HCCsim/data/brca.RData")
load("HCCsim/data/brca.RData")
remove.packages("HCCsim")
remove.packages("HCCsim")
remove.packages(HCCsim)
remove.packages("HCCsim")
library(HCCsim)
base_cl<- HCCSim_clustering_list(list( `1`= c(5,6,7,8), `2`= c(9,4,3), `3`=c(1,2,10,11) ),
domain_size= 15,   #4 clusterless nodes implied
params=list(base_param=1) )
HCCSim_clustering_list()
HCCSim_clustering_list
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::install("HCCsim")
library(HCCsim)
?subdivide_cluster
base_cl<- HCCSim_clustering_list(list( `1`= c(5,6,7,8), `2`= c(9,4,3), `3`=c(1,2,10,11) ),
domain_size= 15,   #4 clusterless nodes implied
params=list(base_param=1) )
subdivision1= HCCSim_clustering_list(list(c(6,8), c(7,5) ), params=list(sub1_param=2))
base_cl
remove.packages(HCCsim)
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::install("HCCsim")
library(HCCsim)
?subdivide_cluster
base_cl<- HCCSim_clustering_list(list( `1`= c(5,6,7,8), `2`= c(9,4,3), `3`=c(1,2,10,11) ),
domain_size= 15,   #4 clusterless nodes implied
params=list(base_param=1) )
subdivision1= HCCSim_clustering_list(list(c(6,8), c(7,5) ), params=list(sub1_param=2))
subdivision2= HCCSim_clustering_list(list(c(1,10), c(2,11) ), params=list(sub2_param=3))
subdivide_cluster( base_cl, `1`, subdivision1)-> hcl
base_cl<- HCCSim_clustering_list(list( `1`= c(5,6,7,8), `2`= c(9,4,3), `3`=c(1,2,10,11) ),
domain_size= 15,   #4 clusterless nodes implied
params=list(base_param=1) )
subdivision1= HCCSim_clustering_list(list(c(6,8), c(7,5) ), params=list(sub1_param=2))
subdivision2= HCCSim_clustering_list(list(c(1,10), c(2,11) ), params=list(sub2_param=3))
subdivide_cluster( base_cl, "1", subdivision1)-> hcl
print(hcl)
subdivide_cluster( hcl, "3", subdivision2)-> hcl
print(hcl)
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::install("HCCsim")
library(HCCsim)
?subdivide_cluster
base_cl<- HCCSim_clustering_list(list( `1`= c(5,6,7,8), `2`= c(9,4,3), `3`=c(1,2,10,11) ),
domain_size= 15,   #4 clusterless nodes implied
params=list(base_param=1) )
subdivision1= HCCSim_clustering_list(list(c(6,8), c(7,5) ), params=list(sub1_param=2))
subdivision2= HCCSim_clustering_list(list(c(1,10), c(2,11) ), params=list(sub2_param=3))
subdivide_cluster( base_cl, "1", subdivision1)-> hcl
print(hcl)
subdivide_cluster( hcl, "3", subdivision2)-> hcl
print(hcl)
base_cl<- HCCSim_clustering_list(list( `1`= c(5,6,7,8), `2`= c(9,4,3), `3`=c(1,2,10,11) ),
domain_size= 15,   #4 clusterless nodes implied
params=list(base_param=1) )
subdivision1= HCCSim_clustering_list(list(c(6,8), c(7,5) ), params=list(sub1_param=2))
subdivision2= HCCSim_clustering_list(list(c(1,10), c(2,11) ), params=list(sub2_param=3))
subdivide_cluster( base_cl, '1', subdivision1)-> hcl
subdivide_cluster( hcl, '3', subdivision2)-> hcl
get_max_lvl(hcl)
get_max_lvl(base_cl)
print(hcl)
base_cl<- HCCsim_clustering_list(list( `1`= c(5,6,7,8), `2`= c(9,4,3), `3`=c(1,2,10,11) ),
domain_size= 15,   #4 clusterless nodes implied
params=list(base_param=1) )
subdivision1= HCCSim_clustering_list(list(c(6,8), c(7,5) ), params=list(sub1_param=2))
subdivision2= HCCSim_clustering_list(list(c(1,10), c(2,11) ), params=list(sub2_param=3))
subdivide_cluster( base_cl, '1', subdivision1)-> hcl
subdivide_cluster( hcl, '3', subdivision2)-> hcl
get_partition_at_g(hcl,1)
get_partition_at_g(hcl,2)
base_cl<- HCCSim_clustering_list(list( `1`= c(5,6,7,8), `2`= c(9,4,3), `3`=c(1,2,10,11) ),
params=list(base_param=1) )
normalized_cl_entropy(base_cl)
dataa(brca)
data(brca)
table(similarity_based_hclust(cor(brca)^2,7))
data(brca)
data(brca_clusters)
lvl1<- initial_clusterNreconstruct(X= brca, X_variances=matrixStats::colVars(brca),
clustering_vector=brca_clusters)
lvl2<- subclusterNreconstruct(X=brca,
X_variances= matrixStats::colVars(brca),
hclustering_list= lvl1$clustering_list,
hcluster_PCA_blocks=lvl1$cluster_blockPCA,
clfun2=similarity_based_hclust,
clfun2OtherArgs_constant=list(method="complete" ),
clfun2OtherArgs_ranges= list(n_group=2:7))
PC_generator_matrix(lvl2$hcluster_blockPCA)-> PCmat
heatmap(abs(cor(PCmat)), Rowv=NA, Colv=NA)
heatmap(sqrt(abs(cor(PCmat))), Rowv=NA, Colv=NA)
multivariate_normal_cholesky(cov(brca[,1:300]), 400)
multivariate_normal_cholesky( cov(brca[,1:300] ), 600) -> gen_data
MSE(cov(brca[,1:300]), cov(gen_data) )
dim(gen_data)
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::install("HCCsim")
library(HCCsim)
help(package="HCCsim")
data(brca)
data(brca_clusters)
lvl1<- initial_clusterNreconstruct(X= brca, X_variances=matrixStats::colVars(brca),
clustering_vector=brca_clusters)
lvl2<- subclusterNreconstruct(X=brca,
X_variances= matrixStats::colVars(brca),
hclustering_list= lvl1$clustering_list,
hcluster_PCA_blocks=lvl1$cluster_blockPCA,
clfun2=similarity_based_hclust,
clfun2OtherArgs_constant=list(method="complete" ),
clfun2OtherArgs_ranges= list(n_group=2:7))
PC_generator_matrix( lvl2$hcluster_blockPCA) -> PCmat
cloned_PC<- cloned_normalPC_matrix(PCmat, n_samples = 1000)
MSE(cor(cloned_PC), cor(PCmat))
meta_list<- list()
for (j in 1:ncol(PCmat))  rmetalog::metalog(PCmat[,j], term_limit=5, step_len=.01) -> meta_list[[j]]
HN_PCmat<- hidden_normalPC_matrix(PCmat, meta_list, rep(5, length(meta_list) ) )
cloned_metaPC<- cloned_metalogPC_matrix(HN_PCmat, meta_list, rep(5, length(meta_list)), n_samples = 1200 )
heatmap( abs(cor(cbind(PCmat, cloned_metaPC))), Colv=NA, Rowv=NA)
data(brca)
data(brca_clusters)
lvl1<- initial_clusterNreconstruct(X= brca, X_variances=matrixStats::colVars(brca),
clustering_vector=brca_clusters)
lvl2<- subclusterNreconstruct(X=brca,
X_variances= matrixStats::colVars(brca),
hclustering_list= lvl1$clustering_list,
hcluster_PCA_blocks=lvl1$cluster_blockPCA,
clfun2=similarity_based_hclust,
clfun2OtherArgs_constant=list(method="complete" ),
clfun2OtherArgs_ranges= list(n_group=2:7))
## 2 level HCS(n): normal distribution of PCs
PC_generator_matrix( lvl2$hcluster_blockPCA) -> PCmat2
cloned_PC_N<- cloned_normalPC_matrix(PCmat2)
#compute missing variancce of 2lvl rec.
X_r2<- get_full_reconstruction(brca, lvl2$hcluster_blockPCA, lvl2$hclustering_list)
noise_variances2<- matrixStats::colVars(brca-X_r2)
X_s2<- get_cloned_dataset(brca, lvl2$hcluster_blockPCA,
lvl2$hclustering_list,
cloned_PC_N,
noise_variances= noise_variances2)
MSE(cor(brca),cor(X_s2))
PC_generator_matrix( lvl1$cluster_blockPCA) -> PCmat1
meta_list<- list()
for (j in 1:ncol(PCmat))  rmetalog::metalog(PCmat[,j], term_limit=5, step_len=.01) -> meta_list[[j]]
HN_PCmat<- hidden_normalPC_matrix(PCmat1, meta_list, rep(5, length(meta_list) ) )
PC_generator_matrix( lvl1$cluster_blockPCA) -> PCmat1
meta_list<- list()
for (j in 1:ncol(PCmat1))  rmetalog::metalog(PCmat1[,j], term_limit=5, step_len=.01) -> meta_list[[j]]
HN_PCmat<- hidden_normalPC_matrix(PCmat1, meta_list, rep(5, length(meta_list) ) )
### note: we can generate any number of samples, say 1000
cloned_metaPC<- cloned_metalogPC_matrix(HN_PCmat, meta_list, rep(5, length(meta_list)),  n_samples= 1000 )
#compute missing variancce of 1lvl rec.
X_r1<- get_full_reconstruction(brca, lvl1$hcluster_blockPCA, lvl1$hclustering_list)
X_r1<- get_full_reconstruction(brca, lvl1$cluster_blockPCA, lvl1$clustering_list)
noise_variances1<- matrixStats::colVars(brca-X_r1)
X_s1<- get_cloned_dataset(brca, lvl1$cluster_blockPCA,
lvl1$clustering_list,
cloned_metaPC,
noise_variances= noise_variances1)
dim(X_s1)
remove.packages("HCCsimm")
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::install("HCCsim")
help(package="HCCsim")
library(HCCsim)
data(brca)
data(brca_clusters)
lvl1<- initial_clusterNreconstruct(X= brca, X_variances=matrixStats::colVars(brca),
clustering_vector=brca_clusters)
lvl2<- subclusterNreconstruct(X=brca,
X_variances= matrixStats::colVars(brca),
hclustering_list= lvl1$clustering_list,
hcluster_PCA_blocks=lvl1$cluster_blockPCA,
clfun2=similarity_based_hclust,
clfun2OtherArgs_constant=list(method="complete" ),
clfun2OtherArgs_ranges= list(n_group=2:7))
## 2 level HCS(n): normal distribution of PCs
PC_generator_matrix( lvl2$hcluster_blockPCA) -> PCmat2
cloned_PC_N<- cloned_normalPC_matrix(PCmat2)
#compute missing variancce of 2lvl rec.
X_r2<- get_full_reconstruction(brca, lvl2$hcluster_blockPCA, lvl2$hclustering_list)
noise_variances2<- matrixStats::colVars(brca-X_r2)
X_s2<- get_cloned_dataset(brca, lvl2$hcluster_blockPCA,
lvl2$hclustering_list,
cloned_PC_N,
noise_variances= noise_variances2)
## 1 lvl HCS(f): metalog distribution fitting on PCs
PC_generator_matrix( lvl1$cluster_blockPCA) -> PCmat1
meta_list<- list()
for (j in 1:ncol(PCmat1))  rmetalog::metalog(PCmat1[,j], term_limit=5, step_len=.01) -> meta_list[[j]]
HN_PCmat<- hidden_normalPC_matrix(PCmat1, meta_list, rep(5, length(meta_list) ) )
### note: we can generate any number of samples, say 1000
cloned_metaPC<- cloned_metalogPC_matrix(HN_PCmat, meta_list, rep(5, length(meta_list)),  n_samples= 1000 )
#compute missing variancce of 1lvl rec.
X_r1<- get_full_reconstruction(brca, lvl1$cluster_blockPCA, lvl1$clustering_list)
noise_variances1<- matrixStats::colVars(brca-X_r1)
X_s1<- get_cloned_dataset(brca, lvl1$cluster_blockPCA,
lvl1$clustering_list,
cloned_metaPC,
noise_variances= noise_variances1)
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::install("HCCsim")
library(HCCsim)
data(brca)
data(brca_clusters)
lvl1<- initial_clusterNreconstruct(X= brca, X_variances=matrixStats::colVars(brca),
clustering_vector=brca_clusters)
lvl2<- subclusterNreconstruct(X=brca,
X_variances= matrixStats::colVars(brca),
hclustering_list= lvl1$clustering_list,
hcluster_PCA_blocks=lvl1$cluster_blockPCA,
clfun2=similarity_based_hclust,
clfun2OtherArgs_constant=list(method="complete" ),
clfun2OtherArgs_ranges= list(n_group=2:7))
## 2 level HCS(n): normal distribution of PCs
PC_generator_matrix( lvl2$hcluster_blockPCA) -> PCmat2
cloned_PC_N<- cloned_normalPC_matrix(PCmat2)
#compute missing variancce of 2lvl rec.
X_r2<- get_full_reconstruction(brca, lvl2$hcluster_blockPCA, lvl2$hclustering_list)
noise_variances2<- matrixStats::colVars(brca-X_r2)
X_s2<- get_cloned_dataset(brca, lvl2$hcluster_blockPCA,
lvl2$hclustering_list,
cloned_PC_N,
noise_variances= noise_variances2)
## 1 lvl HCS(f): metalog distribution fitting on PCs
PC_generator_matrix( lvl1$cluster_blockPCA) -> PCmat1
meta_list<- list()
for (j in 1:ncol(PCmat1))  rmetalog::metalog(PCmat1[,j], term_limit=5, step_len=.01) -> meta_list[[j]]
HN_PCmat<- hidden_normalPC_matrix(PCmat1, meta_list, rep(5, length(meta_list) ) )
### note: we can generate any number of samples, say 1000
cloned_metaPC<- cloned_metalogPC_matrix(HN_PCmat, meta_list, rep(5, length(meta_list)),  n_samples= 1000 )
#compute missing variancce of 1lvl rec.
X_r1<- get_full_reconstruction(brca, lvl1$cluster_blockPCA, lvl1$clustering_list)
noise_variances1<- matrixStats::colVars(brca-X_r1)
X_s1<- get_cloned_dataset(brca, lvl1$cluster_blockPCA,
lvl1$clustering_list,
cloned_metaPC,
noise_variances= noise_variances1)
get_cloned_dataset
library(HCCsim)
get_cloned_dataset()
get_cloned_dataset
data(brca)
data(brca_clusters)
lvl1<- initial_clusterNreconstruct(X= brca, X_variances=matrixStats::colVars(brca),
clustering_vector=brca_clusters)
lvl2<- subclusterNreconstruct(X=brca,
X_variances= matrixStats::colVars(brca),
hclustering_list= lvl1$clustering_list,
hcluster_PCA_blocks=lvl1$cluster_blockPCA,
clfun2=similarity_based_hclust,
clfun2OtherArgs_constant=list(method="complete" ),
clfun2OtherArgs_ranges= list(n_group=2:7))
## 2 level HCS(n): normal distribution of PCs
PC_generator_matrix( lvl2$hcluster_blockPCA) -> PCmat2
cloned_PC_N<- cloned_normalPC_matrix(PCmat2)
#compute missing variancce of 2lvl rec.
X_r2<- get_full_reconstruction(brca, lvl2$hcluster_blockPCA, lvl2$hclustering_list)
noise_variances2<- matrixStats::colVars(brca-X_r2)
X_s2<- get_cloned_dataset(brca, lvl2$hcluster_blockPCA,
lvl2$hclustering_list,
cloned_PC_N,
noise_variances= noise_variances2)
## 1 lvl HCS(f): metalog distribution fitting on PCs
PC_generator_matrix( lvl1$cluster_blockPCA) -> PCmat1
meta_list<- list()
for (j in 1:ncol(PCmat1))  rmetalog::metalog(PCmat1[,j], term_limit=5, step_len=.01) -> meta_list[[j]]
HN_PCmat<- hidden_normalPC_matrix(PCmat1, meta_list, rep(5, length(meta_list) ) )
### note: we can generate any number of samples, say 1000
cloned_metaPC<- cloned_metalogPC_matrix(HN_PCmat, meta_list, rep(5, length(meta_list)),  n_samples= 1000 )
#compute missing variancce of 1lvl rec.
X_r1<- get_full_reconstruction(brca, lvl1$cluster_blockPCA, lvl1$clustering_list)
noise_variances1<- matrixStats::colVars(brca-X_r1)
X_s1<- get_cloned_dataset(brca, lvl1$cluster_blockPCA,
lvl1$clustering_list,
cloned_metaPC,
noise_variances= noise_variances1)
dim(X_s1)
MSE(cor(X_s1), cor(brca))
MSE(matrixStats::colVars(X_s1), matrixStats::colVars(brca))
MSE(matrixStats::colVars(X_s2), matrixStats::colVars(brca))
matrixStats::colVars(brca)[1:20]
matrixStats::colVars(X_s1)[1:20]
matrixStats::colVars(X_r1)[1:20]
matrixStats::colVars(X_r2)[1:20]
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::install("HCCsim")
library(HCCsim)
help(package="HCCsim")
data(brca)
data(brca_clusters)
lvl1<- initial_clusterNreconstruct(X= brca, X_variances=matrixStats::colVars(brca),
clustering_vector=brca_clusters)
lvl2<- subclusterNreconstruct(X=brca,
X_variances= matrixStats::colVars(brca),
hclustering_list= lvl1$clustering_list,
hcluster_PCA_blocks=lvl1$cluster_blockPCA,
clfun2=similarity_based_hclust,
clfun2OtherArgs_constant=list(method="complete" ),
clfun2OtherArgs_ranges= list(n_group=2:7))
## 2 level HCS(n): normal distribution of PCs
PC_generator_matrix( lvl2$hcluster_blockPCA) -> PCmat2
cloned_PC_N<- cloned_normalPC_matrix(PCmat2)
#compute missing variance of 2lvl rec.
X_r2<- get_full_reconstruction(brca, lvl2$hcluster_blockPCA, lvl2$hclustering_list,
add_noise=FALSE) #crucial arg to compute missing variance properly!
noise_variances2<- matrixStats::colVars(brca-X_r2)
X_s2<- get_cloned_dataset(brca, lvl2$hcluster_blockPCA,
lvl2$hclustering_list,
cloned_PC_N,
noise_variances= noise_variances2)
## 1 lvl HCS(f): metalog distribution fitting on PCs
PC_generator_matrix( lvl1$cluster_blockPCA) -> PCmat1
meta_list<- list()
for (j in 1:ncol(PCmat1))  rmetalog::metalog(PCmat1[,j], term_limit=5, step_len=.01) -> meta_list[[j]]
HN_PCmat<- hidden_normalPC_matrix(PCmat1, meta_list, rep(5, length(meta_list) ) )
### note: we can generate any number of samples, say 1000
cloned_metaPC<- cloned_metalogPC_matrix(HN_PCmat, meta_list, rep(5, length(meta_list)),  n_samples= 1000 )
#compute missing variancce of 1lvl rec.
X_r1<- get_full_reconstruction(brca, lvl1$cluster_blockPCA, lvl1$clustering_list,
add_noise=FALSE)
noise_variances1<- matrixStats::colVars(brca-X_r1)
X_s1<- get_cloned_dataset(brca, lvl1$cluster_blockPCA,
lvl1$clustering_list,
cloned_metaPC,
noise_variances= noise_variances1)
MSE(matrixStats::colVars(X_s2), matrixStats::colVars(brca))
matrixStats::colVars(X_s2)[1:20]; matrixStats::colVars(brca)[1:20]
matrixStats::colVars(X_s1)[1:20]; matrixStats::colVars(brca)[1:20]
MSE(cor(brca),cor(X_s2))
MSE(cor(brca),cor(X_s1))
par(mfrow=c(1,2))
hist(brca[,1], X_s1[,1])
hist(\ X_s1[,1])
hist(brca[,1], X_s1[,1])
hist(brca[,1])
hist(X_s1[,1])
hist(brca[,10])
hist(X_s1[,10])
hist(brca[,10])
hist(X_s2[,10])
hist(X_s2[,10r])
hist(X_s2[,15])
hist(brca[,15])
hist(X_s1[,15])
hist(brca[,15])
hist(X_s1[,15])->h1
hist(brca[,15], breaks=h1$breaks)
hist(X_s2[,15])->h1
hist(brca[,15], breaks=h2$breaks)
hist(brca[,15], breaks=h1$breaks)
hist(brca[,15])->h1
hist(X_s2[,15], breaks=h2$breaks)
hist(brca[,15])->h1
hist(X_s2[,15], breaks=h1$breaks)
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::document("HCCsim")
devtools::document("HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::install("HCCsim")
help(package="HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::load("HCCsim")
devtools::install("HCCsim")
help(package="HCCsim")
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::build_manual("HCCsim")
rlang::last_trace()
devtools::build("HCCsim")
devtools::install("HCCsim")
help(corfast)
remove.packages("HCCsim")
devtools::document("HCCsim")
devtools::build("HCCsim")
devtools::install("HCCsim")
help(package="HCCsim")
remove.packages(MDFS)
remove.packages("MDFS")
?optimize
library(HCCsim)
library(cliquePartitioneR)
data(brca)
S<- similarity_matrix(fastPearsonData(brca))
S_ltr<- S[lower.tri(S)]
n_clq_f<- function(t, S, ordS_ltr){
stopifnot((t >= ordS_ltr[[1]]) &&(t <= ordS_ltr[[length(ordS_ltr)]]) )
diag(S)<-0
if (t %in% ordS_ltr) t_exact=TRUE else t_exact=FALSE
n_eq_tries=0
if (t_exact) {
S[S< t]=0
greedyCliquePartitioner(S, expansion_mode = "basic", unique_singletonLabels = FALSE)$membership -> clqs
length(unique(clqs)) -> y_t
#  prev_y=-9999
} else {
r.s_IDX<-min( which(ordS_ltr > t) )
r.s<- ordS_ltr[[r.s_IDX]]
l.s<- ordS_ltr[[r.s_IDX -1 ]]
S[S<l.s]=0
greedyCliquePartitioner(S, expansion_mode = "basic", unique_singletonLabels = FALSE)$membership -> clqs
length(unique(clqs)) -> y_l
S[S<r.s]=0
greedyCliquePartitioner(S, expansion_mode = "basic", unique_singletonLabels = FALSE)$membership -> clqs
length(unique(clqs)) -> y_r
A= (y_r - y_l)/(r.s-l.s)
b= y_l - A*l.s
y_t= A*t + b
print(c(t, y_t))
#if (prev_y==y_t) n_eq_tries= n_eq_tries +1
}
return(y_t)
}
ord_S_ltr<- sort(unique(S_ltr))
plot(diff(ord_S_ltr))
plot(diff(ord_S_ltr), log='y')
plot(diff(ord_S_ltr), log='y')
abline(h= median(diff(ord_S_ltr)))
?abline
median(diff(ord_S_ltr))
quantile(diff(ord_S_ltr), seq(1,1,0.1))
quantile(diff(ord_S_ltr), seq(0,1,0.1))
optimize
abline(h=0.001)
abline(h=0.01, col="red")
abline(h=0.1, col="blue")
max(diff(ord_S_ltr))
which.max(diff(ord_S_ltr))
ord_S_ltr[1:2]
?lfactorial
lfactorial(1,2,3)
lfactorial(c(1,2,3))
exp(lfactorial(c(1,2,3)))
dir()
setwd("cliqueClusteR/")
devtools::build()
devtools::install()
library(cliquePartitioneR)
remove.packages('cliqueClusteR')
